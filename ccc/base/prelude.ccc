; The Cmacs Project.

; @provide ccc.base.prelude

; This prelude should be evaluated in any new environment which includes the
; standard ccc base library.

(defmacro begin (expr . exprs)
  `((lambda () ,expr ,@exprs)))

(defmacro or conditions
  (if (null? conditions)
    #f
    `(if ,(car conditions) #t (or ,@(cdr conditions)))))

(defmacro and conditions
  (if (null? conditions)
    #t
    `(if ,(car conditions) (and ,@(cdr conditions)) #f)))

(defmacro let (bindings expr . exprs)
  `((lambda ,(map car bindings)  ,expr ,@exprs) ,@(map cadr bindings)))

(defmacro let* (bindings expr . exprs)
  (if (null? bindings)
    `((lambda () ,expr ,@exprs))
    `((lambda (,(caar bindings))
        (let* ,(cdr bindings) ,expr ,@exprs)) ,(cadar bindings))))

(defmacro letrec (bindings expr . exprs)
  `((lambda ,(map car bindings)
      ,@(map (lambda (binding) `(set! ,(car binding) ,(cadr binding))) bindings)
      ,expr ,@exprs) ,@(map (lambda (x) #?) bindings)))

(defmacro cond clauses
  (if (null? clauses)
    #?
    `(if ,(caar clauses)
       (begin ,@(cdar clauses))
       (cond ,@(cdr clauses)))))

(defmacro when (test expr . exprs)
  `(if ,test (begin ,expr ,@exprs)))

(defmacro unless (test expr . exprs)
  `(if ,test #? (begin ,expr ,@exprs)))

(defmacro aif (name test consequent . alternate)
  `(let ((,name ,test))
      (if ,name ,consequent ,@alternate)))

(defmacro alambda (params body0 . body)
  `(letrec ((self (lambda ,params ,body0 ,@body))) self))

(defmacro any (name test-expr items)
  (let ((loop (gensym)) (test (gensym)))
    `(letrec ((,test (lambda (,name) ,test-expr))
              (,loop (lambda (items)
                        (if (null? items)
                          #f
                          (if (pair? items)
                            (if (,test (car items)) #t (,loop (cdr items)))
                            #f)))))
      (,loop ,items))))
